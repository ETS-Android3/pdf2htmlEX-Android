/*
 * dependency-builder/build.gradle
 *
 * pdf2htmlEX-Android (https://github.com/ViliusSutkus89/pdf2htmlEX-Android)
 * Android port of pdf2htmlEX - Convert PDF to HTML without losing text or format.
 *
 * Copyright (c) 2019 - 2021 Vilius Sutkus <ViliusSutkus89@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        ndk.abiFilters = project.hasProperty('abi') ? [ project.property('abi') ] : ["arm64-v8a", "armeabi-v7a", "x86", "x86_64"]
        externalNativeBuild.cmake.arguments "-DANDROID_STL=c++_shared"
    }
    buildTypes {
        release.externalNativeBuild {
          cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
        }
        debug.externalNativeBuild {
          cmake.arguments '-DBUILD_3RDPARTY_BINARIES=ON'
        }
    }
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version "3.21.0"
    }
    ndkVersion "22.1.7171670"
    buildFeatures.prefab true
}

// Issue #1
task touchGlibPackage(type: Exec) {
    commandLine 'touch', 'src/main/cpp/packages/glib-2.0.cmake'
    commandLine 'touch', 'src/main/cpp/CMakeLists.txt'
}
preBuild.dependsOn touchGlibPackage

abstract class GatherLicenses extends DefaultTask {
    @OutputFile
    abstract RegularFileProperty getOutputXmlFile()

    @Input
    abstract Property<String> getInputDirectory()

    @TaskAction
    void gather() {
        outputXmlFile.get().asFile.withWriter { writer ->
            def xml = new groovy.xml.MarkupBuilder(writer)

            xml.doubleQuotes = true
            xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')

            xml.licenses() {
                def addLicense = { depName, licenseFiles ->
                    license {
                        dependencyName(depName)
                        def licenseTextVal = new StringBuilder()
                        licenseFiles.each() { licenseFilename ->
                            licenseTextVal.append("$depName/$licenseFilename\n\n")
                            def licenseFile = new File(inputDirectory.get() + "/$depName-prefix/src/$depName/$licenseFilename")
                            def licenseText = licenseFile.getText('UTF-8')
                            // LGPL2.1 and GPLv2 licenses include form feed (page break) characters.
                            // XML does not take kindly to form feed characters.
                            if ((depName == "cairo" && licenseFilename == "COPYING-LGPL-2.1") ||
                                (depName == "Fonts-SymbolAndZapfDingbats" && licenseFilename == "COPYING") ||
                                (depName == "freetype" && licenseFilename == "docs/GPLv2.TXT") ||
                                (depName == "glib-2.0" && licenseFilename == "COPYING") ||
                                (depName == "fribidi" && licenseFilename == "COPYING") ||
                                (depName == "iconv" && licenseFilename == "COPYING.LIB") ||
                                (depName == "intl" && licenseFilename == "COPYING") ||
                                (depName == "pango" && licenseFilename == "COPYING")) {
                                licenseTextVal.append(licenseText.replace("\u000C", ""))
                            } else {
                                licenseTextVal.append(licenseText)
                            }
                            licenseTextVal.append("\n\n")
                        }
                        licenseText(licenseTextVal)
                    }
                }
                addLicense("pdf2htmlEX", ["LICENSE", "LICENSE_GPLv3"])
                addLicense("cairo", ["COPYING", "COPYING-LGPL-2.1", "COPYING-MPL-1.1"])
                addLicense("fontconfig", ["COPYING"])
                addLicense("Fonts-SymbolAndZapfDingbats", ["COPYING"])
                addLicense("freetype", ["docs/LICENSE.TXT", "docs/GPLv2.TXT", "docs/FTL.TXT"])
                addLicense("fribidi", ["COPYING"])
                addLicense("glib-2.0", ["COPYING"])
                addLicense("harfbuzz", ["COPYING"])
                addLicense("iconv", ["README", "COPYING", "COPYING.LIB"])
                addLicense("intl", ["COPYING"])
                addLicense("lcms2", ["COPYING"])
                addLicense("libffi", ["LICENSE"])
                addLicense("libfontforge", ["LICENSE", "COPYING.gplv3"])
                addLicense("libjpeg", ["LICENSE.md", "README.ijg"])
                addLicense("libopenjp2", ["LICENSE"])
                addLicense("libpng", ["LICENSE"])
                addLicense("libtiff-4", ["COPYRIGHT"])
                addLicense("libtool", ["COPYING"])
                addLicense("libuninameslist", ["LICENSE"])
                addLicense("libxml-2.0", ["Copyright"])
                addLicense("pango", ["COPYING"])
                addLicense("pixman-1", ["COPYING"])
                addLicense("poppler-data", ["COPYING", "COPYING.adobe", "COPYING.gpl2"])
                addLicense("poppler", ["COPYING", "COPYING3"])
            }
        }
    }
}

tasks.register("gatherLicenses", GatherLicenses).configure {
    def abi = project.hasProperty('abi') ? project.property('abi') : 'armeabi-v7a'
    inputDirectory = "$projectDir/.cxx/cmake/release/" + abi
    outputXmlFile = file("$buildDir/licenses.xml")
    onlyIf { !file("$buildDir/licenses.xml").exists() }
}

dependencies {
    implementation 'com.viliussutkus89:tmpfile-android:3.0.4'
}

ext.gatherArtifacts = { buildType ->
    def CMakeBuildType = (buildType == "debug") ? "Debug" : "MinSizeRel"

    android.defaultConfig.ndk.abiFilters.each { abi ->
        copy {
            from("$buildDir/installed/$CMakeBuildType/$abi/lib/libpdf2htmlEX.so")
            into("$buildDir/includeTheseInDownstreamAAR/$buildType/jniLibs/$abi")
        }
        copy {
            from("$buildDir/installed/$CMakeBuildType/$abi/bin/libpdf2htmlEX-exe_not_lib.so")
            into("$buildDir/includeTheseInDownstreamAAR/$buildType/jniLibs/$abi")
        }

        copy {
            from("$buildDir/installed/$CMakeBuildType/$abi/share/pdf2htmlEX")
            into("$buildDir/includeTheseInDownstreamAAR/$buildType/assets/$abi/pdf2htmlEX/share/pdf2htmlEX")
        }
        copy {
            from("$buildDir/installed/$CMakeBuildType/$abi/share/poppler")
            into("$buildDir/includeTheseInDownstreamAAR/$buildType/assets/$abi/pdf2htmlEX/share/poppler")
        }
        copy {
            from("$buildDir/installed/$CMakeBuildType/$abi/etc/fonts")
            into("$buildDir/includeTheseInDownstreamAAR/$buildType/assets/$abi/pdf2htmlEX/etc/fonts")
        }

        copy {
            from("$buildDir/installed/$CMakeBuildType/$abi/share/fonts")
            into("$buildDir/includeTheseInDownstreamAAR/$buildType/assets/$abi/pdf2htmlEX/share/fonts")
        }
    }
}

task gatherReleaseArtifacts {
    dependsOn ":dependency-builder:externalNativeBuildRelease"
    doLast {
        gatherArtifacts("release")
    }
}

task gatherDebugArtifacts {
    dependsOn ":dependency-builder:externalNativeBuildDebug"
    doLast {
        gatherArtifacts("debug")
    }
}

tasks.whenTaskAdded {
    if (it.name == 'generateReleaseAssets') {
        it.dependsOn gatherReleaseArtifacts
    }
    else if (it.name == 'generateDebugAssets') {
        it.dependsOn gatherDebugArtifacts
    }
    else if (it.name == 'externalNativeBuildRelease') {
        gatherLicenses.dependsOn externalNativeBuildRelease
    }
}
